import { Meta, StoryObj } from "@storybook/react";
import { withThemeFromJSXProvider } from "@storybook/addon-themes";
import { ThemeProvider } from "styled-components";

import BrickInputBase from "./BrickInputBase";
import { theme } from "../../../styles/theme";
import GlobalStyles from "../../../GlobalStyles";

const meta: Meta<typeof BrickInputBase> = {
  title: "General/Atoms/BrickInputBase",
  component: BrickInputBase,
  decorators: [
    withThemeFromJSXProvider({
      // We’re only defining one theme (“light”) for simplicity.
      themes: {
        light: theme,
      },
      defaultTheme: "light",
      Provider: ThemeProvider,
      GlobalStyles: GlobalStyles,
    }),
  ],
  parameters: {
    docs: {
      // You can leave `page: undefined` to use the default autogenerated docs,
      // which will list each story. Since we also provide AllVariants below,
      // it will show up under the “Docs” tab.
      // page: undefined,
    },
  },
};

export default meta;
type Story = StoryObj<typeof BrickInputBase>;

// A “base” set of props so we don’t repeat ourselves below.
const baseArgs = {
  label: "Input Label",
  helpText: "This is a help text for the input.",
  placeholder: "Enter text here...",
  value: "",
  disabled: false,
  errorText: "",
  error: false,
  required: false,
  onChange: (e: React.ChangeEvent<HTMLInputElement>) =>
    console.log(e.target.value),
  onFocus: () => console.log("Input focused"),
  onBlur: () => console.log("Input blurred"),
};

// export const Default: Story = {
//   args: {
//     ...baseArgs,
//   },
// };

// export const Disabled: Story = {
//   args: {
//     ...baseArgs,
//     disabled: true,
//     // If you want some visible text inside a disabled input,
//     // you can override `value` too:
//     value: "I'm disabled",
//   },
// };

// export const WithError: Story = {
//   args: {
//     ...baseArgs,
//     error: true,
//     errorText: "This field is required.",
//     // Typically, you’d clear `value` when showing an error on a required field:
//     value: "",
//   },
// };

// export const Required: Story = {
//   args: {
//     ...baseArgs,
//     required: true,
//   },
// };

// export const Filled: Story = {
//   args: {
//     ...baseArgs,
//     value: "Filled input",
//   },
// };

// export const Placeholder: Story = {
//   args: {
//     ...baseArgs,
//     placeholder: "Placeholder text",
//   },
// };

// export const WithType: Story = {
//   args: {
//     ...baseArgs,
//     type: "email",
//   },
// };

/**
 * AllVariants
 *
 * This story manually renders each of our “states” in one place.
 * In the Docs tab it will show all of them as a series of rendered inputs,
 * making it easy to compare them at a glance.
 */
export const AllVariants: Story = {
    name: "Brick Inout Base",
  render: () => (
    <div style={{ display: "flex", flexDirection: "column", gap: "1rem", maxWidth: "400px" }}>
      <BrickInputBase {...baseArgs} label={'Default'} />

      <BrickInputBase {...baseArgs} disabled value="I'm disabled" helpText="" />

      <BrickInputBase
        {...baseArgs}
        error
        errorText="This field is required."
        helpText=""
      />

      <BrickInputBase {...baseArgs} required helpText="" />

      <BrickInputBase {...baseArgs} value="Filled input" helpText="" />

      <BrickInputBase {...baseArgs} placeholder="Placeholder text" helpText="" />
    </div>
  ),
  parameters: {
    docs: {
      storyDescription:
        "Below you see every variant (Default, Disabled, With Error, Required, etc.) rendered together for quick visual comparison.",
    },
  },
};